# Generated by Django 5.1.2 on 2024-12-10 11:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_bleach.models
import django_resized.forms
import mptt.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('meta_title', models.CharField(blank=True, max_length=140)),
                ('meta_description', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'verbose_name': 'County',
                'verbose_name_plural': 'Counties',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=20, unique=True)),
                ('max_ads', models.PositiveIntegerField(default=0)),
                ('background_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('price_per_day', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('account_type', models.CharField(choices=[('person', 'Persoană Fizică'), ('company', 'Companie')], default='person', max_length=10)),
                ('email_verified', models.BooleanField(default=False)),
                ('receive_email', models.BooleanField(default=False)),
                ('first_name', models.CharField(max_length=60)),
                ('last_name', models.CharField(max_length=90)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('phone_verified', models.BooleanField(default=False)),
                ('phone_verified_at', models.DateTimeField(blank=True, null=True)),
                ('hashed_ip_address', models.CharField(blank=True, max_length=64, null=True)),
                ('has_accepted_tos', models.BooleanField(default=False)),
                ('tos_accepted_timestamp', models.DateTimeField(blank=True, null=True)),
                ('tos_accepted_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strada', models.CharField(max_length=255)),
                ('strada_numar', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d+$', 'Numărul străzii trebuie să fie un număr.')])),
                ('oras', models.CharField(max_length=255)),
                ('judet', models.CharField(max_length=255)),
                ('cod_postal', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\d{6}$', 'Codul poștal trebuie să fie format din 6 cifre.')])),
                ('tara', models.CharField(max_length=255)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60)),
                ('slug', models.SlugField(blank=True, max_length=80, unique=True)),
                ('short_name', models.CharField(blank=True, max_length=80)),
                ('meta_title', models.CharField(blank=True, max_length=90)),
                ('meta_description', models.CharField(blank=True, max_length=255)),
                ('custom_text', models.TextField(blank=True, null=True)),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format=None, keep_meta=True, null=True, quality=80, scale=None, size=[160, 160], upload_to='category_images/')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='api.category')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=255, unique=True)),
                ('company_name', models.CharField(max_length=255)),
                ('website', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('meta_title', models.CharField(blank=True, max_length=140)),
                ('meta_description', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='api.county')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmailConfirmationToken',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('meta_title', models.CharField(blank=True, max_length=140)),
                ('meta_description', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='neighborhoods', to='api.city')),
            ],
            options={
                'verbose_name': 'Neighborhood',
                'verbose_name_plural': 'Neighborhoods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('description', django_bleach.models.BleachField()),
                ('price', models.PositiveIntegerField(help_text='Prețul trebuie să fie un număr întreg și pozitiv.')),
                ('currency', models.SmallIntegerField(choices=[(0, 'Lei'), (1, 'EUR')], default=0)),
                ('status', models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active'), (2, 'Rejected')], db_index=True, default=0)),
                ('photo1', django_resized.forms.ResizedImageField(crop=None, force_format='WEBP', keep_meta=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo2', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo3', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo4', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo5', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo6', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo7', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo8', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('photo9', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='WEBP', keep_meta=True, null=True, quality=80, scale=None, size=[800, 600], upload_to='listings')),
                ('video_url', models.URLField(blank=True, max_length=500, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('valability_end_date', models.DateField(blank=True, help_text='Data până la care anunțul este valid.', null=True)),
                ('views_count', models.BigIntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('slug', models.SlugField(blank=True, max_length=160, unique=True)),
                ('meta_title', models.CharField(blank=True, max_length=140)),
                ('meta_description', models.CharField(blank=True, max_length=255)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='category_listings', to='api.category')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_listings', to='api.city')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='county_listings', to='api.county')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_listings', to=settings.AUTH_USER_MODEL)),
                ('neighborhood', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='neighborhood_listings', to='api.neighborhood')),
            ],
            options={
                'verbose_name': 'Listing',
                'verbose_name_plural': 'Listings',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporter_name', models.CharField(max_length=255)),
                ('reporter_email', models.EmailField(max_length=254)),
                ('reason', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('dismissed', 'Dismissed')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='api.listing')),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active_field', models.BooleanField(default=False, editable=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
                ('user_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='api.usertype')),
            ],
        ),
    ]
